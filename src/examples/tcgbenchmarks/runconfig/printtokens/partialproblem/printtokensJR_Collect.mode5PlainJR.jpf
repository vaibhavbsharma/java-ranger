target=tcgbenchmarks.printtokens2_3.printTokens2
classpath=${jpf-symbc}/build/examples
sourcepath=${jpf-symbc}/src/examples
#symbolic.method = tcgbenchmarks.printtokens2_3.printTokens2.mainProcess(sym#sym#sym#sym#sym#sym#sym#sym)
##two symbolic input is the maximum that we can do for the partial problem, otherwise mode 5 will take more than an hour
symbolic.method = tcgbenchmarks.printtokens2_3.printTokens2.mainProcess(sym#sym#con#con#con#con#con#con)


vm.storage.class=nil
symbolic.debug=false

#listener = .symbc.SymbolicListener

jvm.insn_factory.class=gov.nasa.jpf.symbc.BranchSymInstructionFactory

#symbolic.dp=z3


#symbolic.dp=z3inc

symbolic.dp=z3bitvector

## branch coverage with unit test for JR
listener =.symbc.VeritestingListener,.symbc.BranchListener
#,gov.nasa.jpf.symbc.numeric.solvers.IncrementalListener
#.symbc.VeriBranchListener,gov.nasa.jpf.symbc.sequences.VeriSymbolicSequenceListener,gov.nasa.jpf.symbc.numeric.solvers.IncrementalListener


symbolic.optimizechoices=false

targetAbsPath=${jpf-symbc}/build/examples/tcgbenchmarks/printtokens2_3/


veritestingMode=5
coverageMode=9
performanceMode=true
evaluationMode=true

tcgON=true
