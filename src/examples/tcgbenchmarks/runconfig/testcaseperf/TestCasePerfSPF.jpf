target=tcgbenchmarks.testcaseperf.TestCasePerf
classpath=${jpf-symbc}/build/examples
sourcepath=${jpf-symbc}/src/examples
vm.storage.class=nil
symbolic.debug=false

#symbolic.method=tcgbenchmarks.testcaseperf.TestCasePerf.singleBranchCov2(sym#sym)

#symbolic.method=tcgbenchmarks.testcaseperf.TestCasePerf.singleBranchCov(sym#sym)

#symbolic.method=tcgbenchmarks.testcaseperf.TestCasePerf.doubleBranchCov(sym#sym)

#symbolic.method=tcgbenchmarks.testcaseperf.TestCasePerf.complexBranchCov(sym#sym)

#symbolic.method=tcgbenchmarks.testcaseperf.TestCasePerf.unoptimalDFS(sym#sym)

#symbolic.method=tcgbenchmarks.testcaseperf.TestCasePerf.doubleLoopUnoptimalDFS(sym#sym)

#symbolic.method=tcgbenchmarks.testcaseperf.TestCasePerf.doubleLoop(sym#sym)

#symbolic.method=tcgbenchmarks.testcaseperf.TestCasePerf.doubleLoop(sym#sym)
symbolic.method=tcgbenchmarks.testcaseperf.TestCasePerf.testER(sym)



#symbolic.method=tcgbenchmarks.testcaseperf.TestCasePerf.mixOfRegions(sym#sym)
listener =.symbc.VeritestingListener,.symbc.BranchListener,gov.nasa.jpf.symbc.sequences.ThreadSymbolicSequenceListener

#symbolic.dp=z3bitvector

#listener = .symbc.SymbolicListener,,gov.nasa.jpf.symbc.numeric.solvers.IncrementalListener
#listener = gov.nasa.jpf.symbc.sequences.SymbolicSequenceListener
#listener = .symbc.BranchListener

#jvm.insn_factory.class=gov.nasa.jpf.symbc.BranchSymInstructionFactory

#symbolic.dp=z3

#symbolic.dp=z3inc
symbolic.dp=z3bitvector

symbolic.optimizechoices=false

veritestingMode=0

targetAbsPath=${jpf-symbc}/build/examples/tcgbenchmarks/testcaseperf/


performanceMode=true

coverageMode=1
evaluationMode=false
#this is only valid in spf mode, can should indicate whether we want to generate test cases for all paths or not
pathcoverage=false

tcgON=true
tcgOnTheGo=false
#pathcoverage=true