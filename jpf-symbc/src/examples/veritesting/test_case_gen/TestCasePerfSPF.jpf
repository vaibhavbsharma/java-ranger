target=veritesting.test_case_gen.TestCasePerf
classpath=${jpf-symbc}/build/examples
sourcepath=${jpf-symbc}/src/examples
vm.storage.class=nil
symbolic.debug=false

#symbolic.method=veritesting.test_case_gen.TestCasePerf.singleBranchCov2(sym#sym)

#symbolic.method=veritesting.test_case_gen.TestCasePerf.singleBranchCov(sym#sym)

#symbolic.method=veritesting.test_case_gen.TestCasePerf.doubleBranchCov(sym#sym)

#symbolic.method=veritesting.test_case_gen.TestCasePerf.complexBranchCov(sym#sym)

#symbolic.method=veritesting.test_case_gen.TestCasePerf.unoptimalDFS(sym#sym)

#symbolic.method=veritesting.test_case_gen.TestCasePerf.doubleLoopUnoptimalDFS(sym#sym)

#symbolic.method=veritesting.test_case_gen.TestCasePerf.doubleLoop(sym#sym)

symbolic.method=veritesting.test_case_gen.TestCasePerf.doubleLoop(sym#sym)


#symbolic.method=veritesting.test_case_gen.TestCasePerf.mixOfRegions(sym#sym)
symbolic.method=veritesting.test_case_gen.TestCasePerf.mixOfRegions2Paths(sym#sym)

#symbolic.dp=z3bitvector

#listener = .symbc.SymbolicListener,,gov.nasa.jpf.symbc.numeric.solvers.IncrementalListener
#listener = gov.nasa.jpf.symbc.sequences.SymbolicSequenceListener
#listener = .symbc.BranchListener

#jvm.insn_factory.class=gov.nasa.jpf.symbc.BranchSymInstructionFactory

#symbolic.dp=z3

#symbolic.dp=z3inc
symbolic.dp=z3bitvectorinc

listener =.symbc.VeritestingListener,gov.nasa.jpf.symbc.numeric.solvers.IncrementalListener

symbolic.optimizechoices=false

#branchCoverageOn=true
#targetAbsPath=${jpf-symbc}/build/examples/veritesting/test_case_gen
#coverageMode=5

veritestingMode=3
performanceMode=true